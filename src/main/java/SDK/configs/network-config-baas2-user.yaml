---
#
# Copyright Fujitsu Australia Software Technology, IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Network-Config-Test"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The network used in the integration tests"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: baas2

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does
    # not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/hfc-cvs"

    # [Optional]. Specific to Composer environment
    wallet: wallet-name

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  testchannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer-0-baas2

    # Required. list of peers from participating orgs
    peers:
      peer-0-baas1:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: false

      peer-1-baas1:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: false

      peer-0-baas2:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer-1-baas2:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: false
#
# list of participating organizations in this network
#
organizations:
  baas2:
    mspid: baas2

    peers:
      - peer-1-baas2
      - peer-0-baas2

    adminPrivateKey:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas2/user/590aa4db7d23519f07d59cd3669f97be1f537f67120d6d8aea429379adffe5a0_sk

    signedCert:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas2/user/10000000002@baas2-cert.pem

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer-0-baas2:
    url: grpcs://192.168.9.40:31020

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
#      ssl-target-name-override: orderer.example.com
      hostnameOverride: orderer-0-baas2
      grpc-max-send-message-length: 15
      grpc.keepalive_time_ms: 360000
      grpc.keepalive_timeout_ms: 180000

    tlsCACerts:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas2/baas2-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer-0-baas1:
    # this URL is used to send endorsement and query requests
    url: grpcs://192.168.9.44:30031

    grpcOptions:
      ssl-target-name-override: peer-0-baas1
      grpc.http2.keepalive_time: 15
      hostnameOverride: peer-0-baas1

    tlsCACerts:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas1/baas1-cert.pem

  peer-1-baas1:
    # this URL is used to send endorsement and query requests
    url: grpcs://192.168.9.44:30033

    grpcOptions:
      ssl-target-name-override: peer-1-baas1
      grpc.http2.keepalive_time: 15
      hostnameOverride: peer-1-baas1

    tlsCACerts:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas1/baas1-cert.pem

  peer-0-baas2:
    # this URL is used to send endorsement and query requests
    url: grpcs://192.168.9.40:31031

    grpcOptions:
      ssl-target-name-override: peer-0-baas2
      grpc.http2.keepalive_time: 15
      hostnameOverride: peer-0-baas2

    tlsCACerts:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas2/baas2-cert.pem

  peer-1-baas2:
    # this URL is used to send endorsement and query requests
    url: grpcs://192.168.9.40:31033

    grpcOptions:
      ssl-target-name-override: peer-1-baas2
      grpc.http2.keepalive_time: 15
      hostnameOverride: peer-1-baas2

    tlsCACerts:
      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/baas2/baas2-cert.pem
#  peer0.org3.example.com:
#    # this URL is used to send endorsement and query requests
#    url: grpcs://192.168.9.166:11051
#
#    grpcOptions:
#      ssl-target-name-override: peer0.org3.example.com
#      grpc.http2.keepalive_time: 15
#      hostnameOverride: peer0.org3.example.com
#
#    tlsCACerts:
#      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem
#
#
#  peer1.org3.example.com:
#    # this URL is used to send endorsement and query requests
#    url: grpcs://192.168.9.166:12051
#
#    grpcOptions:
#      ssl-target-name-override: peer1.org3.example.com
#      grpc.http2.keepalive_time: 15
#      hostnameOverride: peer1.org3.example.com
#
#    tlsCACerts:
#      path: /Users/eggsy/java/src/javasdkdemo/crypto-config/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem